
To scroll forward by a whole screen (except for two lines) use CTRL-F.  The
other way is backward, CTRL-B is the command to use.  Fortunately CTRL-F is
Forward and CTRL-B is Backward, that's easy to remember.

to center screen on location use zz

One key that can be used with mappings is the backslash.  Since you
probably want to define more than one mapping, add another character.  You
could map "\p" to add parentheses around a word, and "\c" to add curly braces,
for example: >
:map \p i(<Esc>ea)<Esc>
:map \c i{<Esc>ea}<Esc>
You need to type the \ and the p quickly after another, so that Vim knows they
belong together.

There are two types of plugins:
    global plugin: Used for all kinds of files
  filetype plugin: Only used for a specific type of file


GETTING A FILETYPE PLUGIN
You can find them in the same places as the global plugins.  Watch out if the
type of file is mentioned, then you know if the plugin is a global or a
filetype one.  The scripts in $VIMRUNTIME/macros are global ones, the filetype
plugins are in $VIMRUNTIME/ftplugin.
$VIMRUNTIME is /usr/share/vim/vim72


The generic names for the filetype plugins are: >
	ftplugin/<filetype>.vim
	ftplugin/<filetype>_<name>.vim
	ftplugin/<filetype>/<name>.vim

see 5.5 about adding help file

:options
This opens a new window, with a list of options with a one-line explanation.
The options are grouped by subject.  Move the cursor to a subject and press
<Enter> to jump there.  Press <Enter> again to jump back.  Or use CTRL-O.

In case you have messed up an option value, you can set it back to the
default by putting an ampersand (&) after the option name.  Example: >
	:set iskeyword&:

:wn is equilavent to the following:
:write
:next

:args shows the files being edited. 

You can redefine the list of files without the need to exit Vim and start it
again.  Use this command to edit three other files: >
	:args five.c six.c seven.h
Or use a wildcard, like it's used in the shell: >
	:args *.txt

`"
This mark takes you to the position where the cursor was when you left the file.


:write >> logfile
This will write the text of the current file to the end of "logfile".  Thus it

:saveas <newfile> 
makes it so future :write will use the <newfile> name

crtl-w jumps between windows

To close a window, use the command: >
	:close
Actually, any command that quits editing a file works, like ":quit" and "ZZ".
But ":close" prevents you from accidentally exiting Vim when you close the
last window.

:only
This closes all windows, except for the current one.  If any of the other
windows has changes, you will get an error message and that window won't be
closed.

The 'laststatus' option can be used to specify when the last window has a
statusline:
	0	never
	1	only when there are split windows (the default)
	2	always

Assume you are editing "thisfile".  To create a new tab page use this command: >
:tabedit thatfile
This will edit the file "thatfile" in a window that occupies the whole Vim
window.
	
Thus you can switch between tab pages by clicking on the label in the top
line.  If you don't have a mouse or don't want to use it, you can use the "gt"
command.  Mnemonic: Goto Tab.

:tab split
This makes a new tab page with one window that is editing the same buffer as
the window we were in:

You can put ":tab" before any Ex command that opens a window.  The window will
be opened in a new tab page.  Another example: >
	:tab help gt
Will show the help text for "gt" in a new tab page.

The "+ register is used for the real clipboard.  "* is the current selection.

Lets say you have macro in the registrar a.   Just move the
cursor to each location and use the "@a" command.  If you have done that once,
you can do it again with "@@".  That's a bit easier to type.  If you now
execute register b with "@b", the next "@@" will use register b.

when do a search and replace. can you 
	CTRL-E		Scroll the text one line up.
	CTRL-Y		Scroll the text one line down.

You can select text with Visual mode.  If you then press ":" to start a colon
command, you will see this: >
	:'<,'>
Now you can type the command and it will be applied to the range of lines that
was visually selected.

I and A (insert and append) work on the lines select in visual block line mode (ctrl-v). 

gJ like J but doesn't add the extra white space.

When you are writing an e-mail message, you may want to include another file.
This can be done with the ":read {filename}" command.  The text of the file is
put below the cursor line.
The ":read" command accepts a range.  The file will be put below the last line
number of this range.  Thus ":$r patch" appends the file "patch" at the end of
the file.

To write a range of lines to a file, the ":write" command can be used.
Without a range it writes the whole file.  With a range only the specified
lines are written: >
	:.,$write tempo
This writes the lines from the cursor until the end of the file into the file
"tempo". can append to file too using ">>". 
:.write >>collection

"gq" is a operator which does reformating. 

"gU" operater makes upper case. "gu" make lower case

To read the contents of the current directory into the file, use this:
on Unix: >
	:read !ls

on 20.1

for command line completion. you can hit ctrl-d to see all the options instead of hitting tab to manually go through them.

Suppose you have done a ":set" command, typed ten more colon commands and then
want to repeat that ":set" command again.  You could press ":" and then ten
times <Up>.  There is a quicker way: >
	:se<Up>

do :history to see a list of commands done.

do q: to open a command history window. here you can see all the history of all commands entered. you can move around and edit normally (jklh movements, etc...). when you have a line edited the way you like it, hit enter to execute it.

   The "!" is used to run a program in various ways.  Let's take
a look at an overview:
	:!{program}		execute {program}
	:r !{program}		execute {program} and read its output
	:w !{program}		execute {program} and send text to its input
	:[range]!{program}	filter text through {program}

:browse oldfiles
pulls up a list of files you have edited in recent history and lets you select one

Sessions store many things, but not the position of marks, contents of
registers and the command line history.  You need to use the viminfo feature
for these things.
   In most situations you will want to use sessions separately from viminfo.
This can be used to switch to another session, but keep the command line
history.  And yank text into registers in one session, and paste it back in
another session.
   You might prefer to keep the info with the session.  You will have to do
this yourself then.  Example: >
	:wviminfo! ~/.vim/secret.viminfo
And to restore this again: >
	:source ~/.vim/secret.vim
	:rviminfo! ~/.vim/secret.viminfo

A session stores the looks of the whole of Vim.  When you want to store the
properties for one window only, use a view.
   The use of a view is for when you want to edit a file in a specific way.
For example, you have line numbers enabled with the 'number' option and
defined a few folds.  Just like with sessions, you can remember this view on
the file and restore it later.  Actually, when you store a session, it stores
the view of each window.

To start the file browser do
:edit .

move the cursor atop a file and press <Enter>; you will then be editing that
file.  To go back to the browser use ":edit ." again, or use ":Explore".
CTRL-O also works.

Pressing <Enter> on the first directory "../" moves you one level
higher.  Pressing "-" does the same thing, without the need to move to the
"../" item first.


The ":cd" command changes the current directory.  You can see what the current
directory is with the ":pwd" command: >
	:pwd
	/home/Bram/VeryLongFileName
Vim remembers the last directory that you used.  Use "cd -" to go back to it.

So long as no ":lcd" command has been used, all windows share the same current
directory.  Doing a ":cd" command in one window will also change the current
directory of the other window.
   For a window where ":lcd" has been used a different current directory is
remembered.  Using ":cd" or ":lcd" in other windows will not change it.
   When using a ":cd" command in a window that uses a different current
directory, it will go back to using the shared directory.

You are editing a C program that contains this line:
	#include "inits.h" ~
You want to see what is in that "inits.h" file.  Move the cursor on the name
of the file and type: >
	gf
Vim will find the file and edit it.
   What if the file is not in the current directory?  Vim will use the 'path'
option to find the file.  This option is a list of directory names where to
look for your file.
   Suppose you have your include files located in "c:/prog/include".  This
command will add it to the 'path' option: >
	:set path+=c:/prog/include
can use relative paths too. ie 
	:set path+=./proto

When you know the file name, but it's not to be found in the file, you can
type it: >
	:find inits.h
Vim will then use the 'path' option to try and locate the file.  This is the
same as the ":edit" command, except for the use of 'path'.

:hide edit two.txt
The buffer "one.txt" disappears from the screen, but Vim still knows that you
are editing this buffer, so it keeps the modified text.  This is called a
hidden buffer: The buffer contains text, but you can't see it.
   The argument of ":hide" is another command.  ":hide" makes that command
behave as if the 'hidden' option was set.  You could also set this option
yourself.  The effect is that when any buffer is abandoned, it becomes hidden.

can do 
:b <part of file name> 
and the closest name buffer will be found and openned.

	Even after removing the buffer with ":bdelete" Vim still remembers it.
	It's actually made "unlisted", it no longer appears in the list from
	":buffers".  The ":buffers!" command will list unlisted buffers (yes,
	Vim can do the impossible).  To really make Vim forget about a buffer,
	use ":bwipe".  Also see the 'buflisted' option.

	vim -b datafile
This sets the 'binary' option.  The effect of this is that unexpected side
effects are turned off.  For example, 'textwidth' is set to zero, to avoid
automatic formatting of lines.  And files are always read in Unix file format.

For ctrl-n and ctrl-p the Vim editor goes through a lot of effort to find words to complete.  By
default, it searches the following places:
	1. Current file
	2. Files in other windows
	3. Other loaded files (hidden buffers)
	4. Files which are not loaded (inactive buffers)
	5. Tag files
	6. All files #included by the current file
You can customize the search order with the 'complete' option.

If you know what you are looking for, you can use these commands to complete
with a certain type of item:
	CTRL-X CTRL-F		file names
	CTRL-X CTRL-L		whole lines
	CTRL-X CTRL-D		macro definitions (also in included files)
	CTRL-X CTRL-I		current and included files
	CTRL-X CTRL-K		words from a dictionary
	CTRL-X CTRL-T		words from a thesaurus
	CTRL-X CTRL-]		tags
	CTRL-X CTRL-V		Vim command line
After each of them CTRL-N can be used to find the next match, CTRL-P to find
the previous match.

Source code files are well structured.  That makes it possible to do
completion in an intelligent way.  In Vim this is called Omni completion.  In
some other editors it's called intellisense, but that is a trademark.
The key to Omni completion is CTRL-X CTRL-O.  Obviously the O stands for Omni
here, so that you can remember it easier.  Let's use an example for editing C
source:
	{ ~
	    struct foo *p; ~
	    p-> ~
The cursor is after "p->".  Now type CTRL-X CTRL-O.  Vim will offer you a list
of alternatives, which are the items that "struct foo" contains.  That is
quite different from using CTRL-P, which would complete any word, while only
members of "struct foo" are valid here.
For Omni completion to work you may need to do some setup.  At least make sure
filetype plugins are enabled.  Your vimrc file should contain a line like
this: >
	filetype plugin on
Or: >
	filetype plugin indent on
For C code you need to create a tags file and set the 'tags' option.  That is
explained |ft-c-omni|.  For other filetypes you may need to do something
similar, look below |compl-omni-filetypes|.  It only works for specific
filetypes.  Check the value of the 'omnifunc' option to find out if it would
work.

The CTRL-V command is used to insert the next character literally.  In other
words, any special meaning the character has, it will be ignored.  For
example: >
	CTRL-V <Esc>
Inserts an escape character.  Thus you don't leave Insert mode. 

Let's say you have textwidth set and you delete some words from a line with alots of stuff after it. The Vim editor is not a word processor.  In a word processor, if you delete
something at the beginning of the paragraph, the line breaks are reworked. to rework text up the gq operator.


When you have code that is badly formatted, or you inserted and deleted lines,
you need to re-indent the lines.  The "=" operator does this.  The simplest
form is: >
	==
This indents the current line.

The most simple form of automatic indenting is with the 'autoindent' option.
It uses the indent from the previous line.  A bit smarter is the 'smartindent'
option.  This is useful for languages where no indent file is available.
'smartindent' is not as smart as 'cindent', but smarter than 'autoindent'.

The Vim editor enables you to define your own commands.  You execute these
commands just like any other Command-line mode command.
   To define a command, use the ":command" command, as follows: >
	:command DeleteFirst 1delete

An autocommand is a command that is executed automatically in response to some
event, such as a file being read or written or a buffer change. 

the command "let" shows all the variables

uses the following to reference various types
$NAME		environment variable
&name		option
@r		register
